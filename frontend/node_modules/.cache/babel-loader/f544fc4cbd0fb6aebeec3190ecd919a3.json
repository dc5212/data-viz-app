{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devarshi\\\\data-viz-app\\\\frontend\\\\src\\\\components\\\\LineChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineChart = ({\n  data\n}) => {\n  _s();\n  const chartRef = useRef();\n  useEffect(() => {\n    if (!data || data.length === 0) return;\n\n    // Clear previous chart\n    d3.select(chartRef.current).selectAll(\"*\").remove();\n\n    // Sort data by date\n    const sortedData = [...data].sort((a, b) => new Date(a.date) - new Date(b.date));\n\n    // Set dimensions\n    const margin = {\n      top: 20,\n      right: 30,\n      bottom: 40,\n      left: 50\n    };\n    const width = 600 - margin.left - margin.right;\n    const height = 400 - margin.top - margin.bottom;\n\n    // Parse dates\n    const parseDate = d3.timeParse(\"%Y-%m\");\n    sortedData.forEach(d => {\n      d.parsedDate = parseDate(d.date);\n    });\n\n    // Create SVG\n    const svg = d3.select(chartRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Create scales\n    const x = d3.scaleTime().domain(d3.extent(sortedData, d => d.parsedDate)).range([0, width]);\n    const y = d3.scaleLinear().domain([0, d3.max(sortedData, d => d.count)]).nice().range([height, 0]);\n\n    // Create line generator\n    const line = d3.line().x(d => x(d.parsedDate)).y(d => y(d.count)).curve(d3.curveMonotoneX);\n\n    // Add line path\n    svg.append(\"path\").datum(sortedData).attr(\"fill\", \"none\").attr(\"stroke\", \"#4682b4\").attr(\"stroke-width\", 2).attr(\"d\", line);\n\n    // Add dots\n    svg.selectAll(\".dot\").data(sortedData).enter().append(\"circle\").attr(\"class\", \"dot\").attr(\"cx\", d => x(d.parsedDate)).attr(\"cy\", d => y(d.count)).attr(\"r\", 5).attr(\"fill\", \"#4682b4\");\n\n    // Add axes\n    svg.append(\"g\").attr(\"transform\", `translate(0,${height})`).call(d3.axisBottom(x).tickFormat(d3.timeFormat(\"%b %Y\")));\n    svg.append(\"g\").call(d3.axisLeft(y));\n\n    // Add title\n    svg.append(\"text\").attr(\"x\", width / 2).attr(\"y\", 0 - margin.top / 2).attr(\"text-anchor\", \"middle\").style(\"font-size\", \"16px\").text(\"Sales by Month\");\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 10\n  }, this);\n};\n_s(LineChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = LineChart;\nexport default LineChart;\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","LineChart","data","_s","chartRef","length","select","current","selectAll","remove","sortedData","sort","a","b","Date","date","margin","top","right","bottom","left","width","height","parseDate","timeParse","forEach","d","parsedDate","svg","append","attr","x","scaleTime","domain","extent","range","y","scaleLinear","max","count","nice","line","curve","curveMonotoneX","datum","enter","call","axisBottom","tickFormat","timeFormat","axisLeft","style","text","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Devarshi/data-viz-app/frontend/src/components/LineChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst LineChart = ({ data }) => {\r\n  const chartRef = useRef();\r\n  \r\n  useEffect(() => {\r\n    if (!data || data.length === 0) return;\r\n    \r\n    // Clear previous chart\r\n    d3.select(chartRef.current).selectAll(\"*\").remove();\r\n    \r\n    // Sort data by date\r\n    const sortedData = [...data].sort((a, b) => new Date(a.date) - new Date(b.date));\r\n    \r\n    // Set dimensions\r\n    const margin = { top: 20, right: 30, bottom: 40, left: 50 };\r\n    const width = 600 - margin.left - margin.right;\r\n    const height = 400 - margin.top - margin.bottom;\r\n    \r\n    // Parse dates\r\n    const parseDate = d3.timeParse(\"%Y-%m\");\r\n    sortedData.forEach(d => {\r\n      d.parsedDate = parseDate(d.date);\r\n    });\r\n    \r\n    // Create SVG\r\n    const svg = d3.select(chartRef.current)\r\n      .append(\"svg\")\r\n        .attr(\"width\", width + margin.left + margin.right)\r\n        .attr(\"height\", height + margin.top + margin.bottom)\r\n      .append(\"g\")\r\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n    \r\n    // Create scales\r\n    const x = d3.scaleTime()\r\n      .domain(d3.extent(sortedData, d => d.parsedDate))\r\n      .range([0, width]);\r\n    \r\n    const y = d3.scaleLinear()\r\n      .domain([0, d3.max(sortedData, d => d.count)])\r\n      .nice()\r\n      .range([height, 0]);\r\n    \r\n    // Create line generator\r\n    const line = d3.line()\r\n      .x(d => x(d.parsedDate))\r\n      .y(d => y(d.count))\r\n      .curve(d3.curveMonotoneX);\r\n    \r\n    // Add line path\r\n    svg.append(\"path\")\r\n      .datum(sortedData)\r\n      .attr(\"fill\", \"none\")\r\n      .attr(\"stroke\", \"#4682b4\")\r\n      .attr(\"stroke-width\", 2)\r\n      .attr(\"d\", line);\r\n    \r\n    // Add dots\r\n    svg.selectAll(\".dot\")\r\n      .data(sortedData)\r\n      .enter()\r\n      .append(\"circle\")\r\n        .attr(\"class\", \"dot\")\r\n        .attr(\"cx\", d => x(d.parsedDate))\r\n        .attr(\"cy\", d => y(d.count))\r\n        .attr(\"r\", 5)\r\n        .attr(\"fill\", \"#4682b4\");\r\n    \r\n    // Add axes\r\n    svg.append(\"g\")\r\n      .attr(\"transform\", `translate(0,${height})`)\r\n      .call(d3.axisBottom(x).tickFormat(d3.timeFormat(\"%b %Y\")));\r\n    \r\n    svg.append(\"g\")\r\n      .call(d3.axisLeft(y));\r\n    \r\n    // Add title\r\n    svg.append(\"text\")\r\n      .attr(\"x\", width / 2)\r\n      .attr(\"y\", 0 - margin.top / 2)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .style(\"font-size\", \"16px\")\r\n      .text(\"Sales by Month\");\r\n      \r\n  }, [data]);\r\n  \r\n  return <div ref={chartRef}></div>;\r\n};\r\n\r\nexport default LineChart;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,SAAS,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC9B,MAAMC,QAAQ,GAAGP,MAAM,CAAC,CAAC;EAEzBD,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,IAAI,IAAIA,IAAI,CAACG,MAAM,KAAK,CAAC,EAAE;;IAEhC;IACAP,EAAE,CAACQ,MAAM,CAACF,QAAQ,CAACG,OAAO,CAAC,CAACC,SAAS,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC;;IAEnD;IACA,MAAMC,UAAU,GAAG,CAAC,GAAGR,IAAI,CAAC,CAACS,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACF,CAAC,CAACG,IAAI,CAAC,GAAG,IAAID,IAAI,CAACD,CAAC,CAACE,IAAI,CAAC,CAAC;;IAEhF;IACA,MAAMC,MAAM,GAAG;MAAEC,GAAG,EAAE,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,MAAM,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAG,CAAC;IAC3D,MAAMC,KAAK,GAAG,GAAG,GAAGL,MAAM,CAACI,IAAI,GAAGJ,MAAM,CAACE,KAAK;IAC9C,MAAMI,MAAM,GAAG,GAAG,GAAGN,MAAM,CAACC,GAAG,GAAGD,MAAM,CAACG,MAAM;;IAE/C;IACA,MAAMI,SAAS,GAAGzB,EAAE,CAAC0B,SAAS,CAAC,OAAO,CAAC;IACvCd,UAAU,CAACe,OAAO,CAACC,CAAC,IAAI;MACtBA,CAAC,CAACC,UAAU,GAAGJ,SAAS,CAACG,CAAC,CAACX,IAAI,CAAC;IAClC,CAAC,CAAC;;IAEF;IACA,MAAMa,GAAG,GAAG9B,EAAE,CAACQ,MAAM,CAACF,QAAQ,CAACG,OAAO,CAAC,CACpCsB,MAAM,CAAC,KAAK,CAAC,CACXC,IAAI,CAAC,OAAO,EAAET,KAAK,GAAGL,MAAM,CAACI,IAAI,GAAGJ,MAAM,CAACE,KAAK,CAAC,CACjDY,IAAI,CAAC,QAAQ,EAAER,MAAM,GAAGN,MAAM,CAACC,GAAG,GAAGD,MAAM,CAACG,MAAM,CAAC,CACrDU,MAAM,CAAC,GAAG,CAAC,CACTC,IAAI,CAAC,WAAW,EAAE,aAAad,MAAM,CAACI,IAAI,IAAIJ,MAAM,CAACC,GAAG,GAAG,CAAC;;IAEjE;IACA,MAAMc,CAAC,GAAGjC,EAAE,CAACkC,SAAS,CAAC,CAAC,CACrBC,MAAM,CAACnC,EAAE,CAACoC,MAAM,CAACxB,UAAU,EAAEgB,CAAC,IAAIA,CAAC,CAACC,UAAU,CAAC,CAAC,CAChDQ,KAAK,CAAC,CAAC,CAAC,EAAEd,KAAK,CAAC,CAAC;IAEpB,MAAMe,CAAC,GAAGtC,EAAE,CAACuC,WAAW,CAAC,CAAC,CACvBJ,MAAM,CAAC,CAAC,CAAC,EAAEnC,EAAE,CAACwC,GAAG,CAAC5B,UAAU,EAAEgB,CAAC,IAAIA,CAAC,CAACa,KAAK,CAAC,CAAC,CAAC,CAC7CC,IAAI,CAAC,CAAC,CACNL,KAAK,CAAC,CAACb,MAAM,EAAE,CAAC,CAAC,CAAC;;IAErB;IACA,MAAMmB,IAAI,GAAG3C,EAAE,CAAC2C,IAAI,CAAC,CAAC,CACnBV,CAAC,CAACL,CAAC,IAAIK,CAAC,CAACL,CAAC,CAACC,UAAU,CAAC,CAAC,CACvBS,CAAC,CAACV,CAAC,IAAIU,CAAC,CAACV,CAAC,CAACa,KAAK,CAAC,CAAC,CAClBG,KAAK,CAAC5C,EAAE,CAAC6C,cAAc,CAAC;;IAE3B;IACAf,GAAG,CAACC,MAAM,CAAC,MAAM,CAAC,CACfe,KAAK,CAAClC,UAAU,CAAC,CACjBoB,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CACpBA,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CACzBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBA,IAAI,CAAC,GAAG,EAAEW,IAAI,CAAC;;IAElB;IACAb,GAAG,CAACpB,SAAS,CAAC,MAAM,CAAC,CAClBN,IAAI,CAACQ,UAAU,CAAC,CAChBmC,KAAK,CAAC,CAAC,CACPhB,MAAM,CAAC,QAAQ,CAAC,CACdC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CACpBA,IAAI,CAAC,IAAI,EAAEJ,CAAC,IAAIK,CAAC,CAACL,CAAC,CAACC,UAAU,CAAC,CAAC,CAChCG,IAAI,CAAC,IAAI,EAAEJ,CAAC,IAAIU,CAAC,CAACV,CAAC,CAACa,KAAK,CAAC,CAAC,CAC3BT,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC;;IAE5B;IACAF,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,CACZC,IAAI,CAAC,WAAW,EAAE,eAAeR,MAAM,GAAG,CAAC,CAC3CwB,IAAI,CAAChD,EAAE,CAACiD,UAAU,CAAChB,CAAC,CAAC,CAACiB,UAAU,CAAClD,EAAE,CAACmD,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;IAE5DrB,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,CACZiB,IAAI,CAAChD,EAAE,CAACoD,QAAQ,CAACd,CAAC,CAAC,CAAC;;IAEvB;IACAR,GAAG,CAACC,MAAM,CAAC,MAAM,CAAC,CACfC,IAAI,CAAC,GAAG,EAAET,KAAK,GAAG,CAAC,CAAC,CACpBS,IAAI,CAAC,GAAG,EAAE,CAAC,GAAGd,MAAM,CAACC,GAAG,GAAG,CAAC,CAAC,CAC7Ba,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BqB,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAC1BC,IAAI,CAAC,gBAAgB,CAAC;EAE3B,CAAC,EAAE,CAAClD,IAAI,CAAC,CAAC;EAEV,oBAAOF,OAAA;IAAKqD,GAAG,EAAEjD;EAAS;IAAAkD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACnC,CAAC;AAACtD,EAAA,CArFIF,SAAS;AAAAyD,EAAA,GAATzD,SAAS;AAuFf,eAAeA,SAAS;AAAC,IAAAyD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}