[{"C:\\Users\\Devarshi\\data-viz-app\\frontend\\src\\index.js":"1","C:\\Users\\Devarshi\\data-viz-app\\frontend\\src\\App.js":"2","C:\\Users\\Devarshi\\data-viz-app\\frontend\\src\\pages\\Home.js":"3","C:\\Users\\Devarshi\\data-viz-app\\frontend\\src\\pages\\TaskDetails.js":"4","C:\\Users\\Devarshi\\data-viz-app\\frontend\\src\\components\\BarChart.js":"5","C:\\Users\\Devarshi\\data-viz-app\\frontend\\src\\components\\TaskForm.js":"6","C:\\Users\\Devarshi\\data-viz-app\\frontend\\src\\components\\LineChart.js":"7","C:\\Users\\Devarshi\\data-viz-app\\frontend\\src\\components\\TaskList.js":"8","C:\\Users\\Devarshi\\data-viz-app\\frontend\\src\\services\\api.js":"9","C:\\Users\\Devarshi\\data-viz-app\\frontend\\src\\components\\PriceChart.js":"10","C:\\Users\\Devarshi\\data-viz-app\\frontend\\src\\pages\\Dashboard.js":"11"},{"size":228,"mtime":1743346828273,"results":"12","hashOfConfig":"13"},{"size":947,"mtime":1743348783743,"results":"14","hashOfConfig":"13"},{"size":920,"mtime":1743346828275,"results":"15","hashOfConfig":"13"},{"size":8527,"mtime":1743349012095,"results":"16","hashOfConfig":"13"},{"size":3462,"mtime":1743346828262,"results":"17","hashOfConfig":"13"},{"size":3011,"mtime":1743346828268,"results":"18","hashOfConfig":"13"},{"size":5286,"mtime":1743346828266,"results":"19","hashOfConfig":"13"},{"size":2735,"mtime":1743350106673,"results":"20","hashOfConfig":"13"},{"size":1743,"mtime":1743350079331,"results":"21","hashOfConfig":"13"},{"size":2521,"mtime":1743348367972,"results":"22","hashOfConfig":"13"},{"size":5155,"mtime":1743348554385,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"qnzj7f",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},"C:\\Users\\Devarshi\\data-viz-app\\frontend\\src\\index.js",[],["49","50"],"C:\\Users\\Devarshi\\data-viz-app\\frontend\\src\\App.js",[],"C:\\Users\\Devarshi\\data-viz-app\\frontend\\src\\pages\\Home.js",[],"C:\\Users\\Devarshi\\data-viz-app\\frontend\\src\\pages\\TaskDetails.js",["51","52"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { fetchTask, fetchTaskAnalytics } from '../services/api';\r\nimport BarChart from '../components/BarChart';\r\nimport LineChart from '../components/LineChart';\r\nimport { exportTaskData } from '../services/api';\r\nimport PriceChart from '../components/PriceChart';\r\n\r\nconst TaskDetails = () => {\r\n  const { taskId } = useParams();\r\n  const [task, setTask] = useState(null);\r\n  const [analytics, setAnalytics] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [hasData, setHasData] = useState(true);\r\n  const [filters, setFilters] = useState({\r\n    company: '',\r\n    year: ''\r\n  });\r\n  \r\n  useEffect(() => {\r\n    const loadTaskData = async () => {\r\n      try {\r\n        const taskData = await fetchTask(taskId);\r\n        setTask(taskData);\r\n        \r\n        if (taskData.status === 'completed') {\r\n          const analyticsData = await fetchTaskAnalytics(taskId);\r\n          setAnalytics(analyticsData);\r\n        }\r\n      } catch (err) {\r\n        setError('Error loading task data. Please try again.');\r\n        console.error(err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    loadTaskData();\r\n    \r\n    // Poll for updates if task is not completed\r\n    let intervalId;\r\n    if (task && task.status !== 'completed') {\r\n      intervalId = setInterval(loadTaskData, 2000);\r\n    }\r\n    \r\n    return () => {\r\n      if (intervalId) clearInterval(intervalId);\r\n    };\r\n  }, [taskId, task?.status]);\r\n  \r\n  const handleFilterChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFilters({\r\n      ...filters,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  const handleExportCSV = () => {\r\n    exportTaskData(taskId, 'csv', filters);\r\n  };\r\n\r\n  const handleExportExcel = () => {\r\n      exportTaskData(taskId, 'excel', filters);\r\n  };\r\n  \r\n  \r\n  // Add this right after you apply filters\r\n  const applyFilters = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Fetch analytics with the current filters\r\n      const analyticsData = await fetchTaskAnalytics(taskId, filters);\r\n      setAnalytics(analyticsData);\r\n      \r\n      // Check if the filtered data is empty\r\n      const hasTimelineData = analyticsData.timeline_chart && analyticsData.timeline_chart.length > 0;\r\n      const hasBarData = analyticsData.bar_chart && analyticsData.bar_chart.length > 0;\r\n      \r\n      // Set a state variable to track if we have data\r\n      setHasData(hasTimelineData || hasBarData);\r\n    } catch (err) {\r\n      console.error('Error applying filters:', err);\r\n      setError('Error applying filters. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  if (loading && !task) {\r\n    return <div>Loading task data...</div>;\r\n  }\r\n  \r\n  if (error) {\r\n    return <div className=\"error\">{error}</div>;\r\n  }\r\n  \r\n  if (!task) {\r\n    return <div>Task not found</div>;\r\n  }\r\n  \r\n  return (\r\n    <div className=\"task-details\">\r\n      <h1>Task {taskId} Details</h1>\r\n      \r\n      <div className=\"task-info\">\r\n        <h2>Task Information</h2>\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <td>Status:</td>\r\n              <td>{task.status}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Created:</td>\r\n              <td>{new Date(task.created_at).toLocaleString()}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Parameters:</td>\r\n              <td>\r\n                <ul>\r\n                  <li>Start Year: {task.parameters.start_year}</li>\r\n                  <li>End Year: {task.parameters.end_year}</li>\r\n                  <li>\r\n                    Companies: {task.parameters.companies && task.parameters.companies.length > 0\r\n                      ? task.parameters.companies.join(', ')\r\n                      : 'All'\r\n                    }\r\n                  </li>\r\n                </ul>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      \r\n      {task.status !== 'completed' ? (\r\n        <div className=\"processing-message\">\r\n          <p>Task is currently {task.status}. Please wait for it to complete.</p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"visualization-section\">\r\n          <h2>Data Visualization</h2>\r\n          \r\n          <div className=\"filters\">\r\n            <h3>Filter Data</h3>\r\n            <div className=\"filter-form\">\r\n              <div className=\"form-group\">\r\n                <label>Company:</label>\r\n                <select\r\n                  name=\"company\"\r\n                  value={filters.company}\r\n                  onChange={handleFilterChange}\r\n                >\r\n                  <option value=\"\">All Companies</option>\r\n                  <option value=\"Toyota\">Toyota</option>\r\n                  <option value=\"Honda\">Honda</option>\r\n                  <option value=\"Ford\">Ford</option>\r\n                  <option value=\"Chevrolet\">Chevrolet</option>\r\n                  <option value=\"Nissan\">Nissan</option>\r\n                </select>\r\n              </div>\r\n              \r\n              <div className=\"form-group\">\r\n                <label>Year:</label>\r\n                <select\r\n                  name=\"year\"\r\n                  value={filters.year}\r\n                  onChange={handleFilterChange}\r\n                >\r\n                  <option value=\"\">All Years</option>\r\n                  <option value=\"2023\">2023</option>\r\n                  <option value=\"2024\">2024</option>\r\n                  <option value=\"2025\">2025</option>\r\n                </select>\r\n              </div>\r\n              \r\n              <button onClick={applyFilters}>Apply Filters</button>\r\n            </div>\r\n          </div>\r\n\r\n          {task.status === 'completed' && (\r\n              <div className=\"export-buttons\">\r\n                  <h3>Export Data</h3>\r\n                  <div className=\"button-group\">\r\n                      <button onClick={handleExportCSV} className=\"export-btn\">\r\n                          Export as CSV\r\n                      </button>\r\n                      <button onClick={handleExportExcel} className=\"export-btn\">\r\n                          Export as Excel\r\n                      </button>\r\n                  </div>\r\n              </div>\r\n          )}\r\n\r\n          \r\n          {analytics && (\r\n            <div className=\"charts\">\r\n              <div className=\"chart-container\">\r\n                <h3>Sales by Month</h3>\r\n                <LineChart data={analytics.timeline_chart} />\r\n              </div>\r\n              \r\n              <div className=\"chart-container\">\r\n                <h3>Sales by Company</h3>\r\n                <BarChart data={analytics.bar_chart} />\r\n              </div>\r\n              \r\n              <div className=\"chart-container\">\r\n                <h3>Average Price by Company</h3>\r\n                <PriceChart data={analytics.price_chart} />\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {analytics && analytics.bar_chart.length > 0 && (\r\n            <div className=\"analysis-cards\">\r\n              <div className=\"card\">\r\n                <h3>Total Sales</h3>\r\n                <p className=\"card-value\">\r\n                  {analytics.bar_chart.reduce((sum, item) => sum + item.count, 0)}\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"card\">\r\n                <h3>Top Company</h3>\r\n                <p className=\"card-value\">\r\n                  {analytics.bar_chart[0].company}\r\n                </p>\r\n                <p className=\"card-subtitle\">\r\n                  {analytics.bar_chart[0].count} sales\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"card\">\r\n                <h3>Average Price</h3>\r\n                <p className=\"card-value\">\r\n                  ${((analytics.price_chart.reduce((sum, item) => sum + item.avg_price, 0) / \r\n                    analytics.price_chart.length) || 0).toFixed(2)}\r\n                </p>\r\n              </div>\r\n              \r\n              <div className=\"card\">\r\n                <h3>Price Range</h3>\r\n                <p className=\"card-value\">\r\n                  ${Math.min(...analytics.price_chart.map(item => item.avg_price)).toFixed(2)} - \r\n                  ${Math.max(...analytics.price_chart.map(item => item.avg_price)).toFixed(2)}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskDetails;","C:\\Users\\Devarshi\\data-viz-app\\frontend\\src\\components\\BarChart.js",[],"C:\\Users\\Devarshi\\data-viz-app\\frontend\\src\\components\\TaskForm.js",[],"C:\\Users\\Devarshi\\data-viz-app\\frontend\\src\\components\\LineChart.js",[],"C:\\Users\\Devarshi\\data-viz-app\\frontend\\src\\components\\TaskList.js",[],"C:\\Users\\Devarshi\\data-viz-app\\frontend\\src\\services\\api.js",[],"C:\\Users\\Devarshi\\data-viz-app\\frontend\\src\\components\\PriceChart.js",[],"C:\\Users\\Devarshi\\data-viz-app\\frontend\\src\\pages\\Dashboard.js",["53"],"import React, { useState, useEffect } from 'react';\r\nimport { fetchTasks, fetchTaskAnalytics } from '../services/api';\r\nimport LineChart from '../components/LineChart';\r\nimport BarChart from '../components/BarChart';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Dashboard = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [aggregatedData, setAggregatedData] = useState({\r\n    total_sales: 0,\r\n    companies: {},\r\n    timeline: {}\r\n  });\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  \r\n  useEffect(() => {\r\n    const loadDashboardData = async () => {\r\n      try {\r\n        // Load all tasks\r\n        const tasksData = await fetchTasks();\r\n        setTasks(tasksData);\r\n        \r\n        // Process only completed tasks\r\n        const completedTasks = tasksData.filter(task => task.status === 'completed');\r\n        \r\n        // Aggregate data from all completed tasks\r\n        let totalSales = 0;\r\n        const companySales = {};\r\n        const timelineSales = {};\r\n        \r\n        for (const task of completedTasks) {\r\n          const analytics = await fetchTaskAnalytics(task.id);\r\n          \r\n          // Count total sales from bar chart\r\n          analytics.bar_chart.forEach(item => {\r\n            totalSales += item.count;\r\n            \r\n            // Aggregate by company\r\n            if (!companySales[item.company]) {\r\n              companySales[item.company] = 0;\r\n            }\r\n            companySales[item.company] += item.count;\r\n          });\r\n          \r\n          // Aggregate timeline data\r\n          analytics.timeline_chart.forEach(item => {\r\n            if (!timelineSales[item.date]) {\r\n              timelineSales[item.date] = 0;\r\n            }\r\n            timelineSales[item.date] += item.count;\r\n          });\r\n        }\r\n        \r\n        // Format data for charts\r\n        const companyChartData = Object.keys(companySales).map(company => ({\r\n          company,\r\n          count: companySales[company]\r\n        }));\r\n        \r\n        const timelineChartData = Object.keys(timelineSales)\r\n          .sort()\r\n          .map(date => ({\r\n            date,\r\n            count: timelineSales[date]\r\n          }));\r\n        \r\n        setAggregatedData({\r\n          total_sales: totalSales,\r\n          company_chart: companyChartData,\r\n          timeline_chart: timelineChartData\r\n        });\r\n        \r\n      } catch (err) {\r\n        console.error('Error loading dashboard data:', err);\r\n        setError('Failed to load dashboard data.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    loadDashboardData();\r\n  }, []);\r\n  \r\n  if (loading) {\r\n    return <div className=\"loading\">Loading dashboard data...</div>;\r\n  }\r\n  \r\n  if (error) {\r\n    return <div className=\"error\">{error}</div>;\r\n  }\r\n  \r\n  return (\r\n    <div className=\"dashboard\">\r\n      <h1>Dashboard Overview</h1>\r\n      \r\n      <div className=\"dashboard-summary\">\r\n        <div className=\"summary-card\">\r\n          <h3>Total Tasks</h3>\r\n          <p className=\"summary-value\">{tasks.length}</p>\r\n        </div>\r\n        \r\n        <div className=\"summary-card\">\r\n          <h3>Completed Tasks</h3>\r\n          <p className=\"summary-value\">{tasks.filter(t => t.status === 'completed').length}</p>\r\n        </div>\r\n        \r\n        <div className=\"summary-card\">\r\n          <h3>Total Car Sales</h3>\r\n          <p className=\"summary-value\">{aggregatedData.total_sales.toLocaleString()}</p>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"recent-tasks\">\r\n        <h2>Recent Tasks</h2>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>Status</th>\r\n              <th>Created</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {tasks.slice(0, 5).map(task => (\r\n              <tr key={task.id}>\r\n                <td>{task.id}</td>\r\n                <td>\r\n                  <span className={`status-${task.status}`}>\r\n                    {task.status}\r\n                  </span>\r\n                </td>\r\n                <td>{new Date(task.created_at).toLocaleString()}</td>\r\n                <td>\r\n                  <Link to={`/tasks/${task.id}`}>View Details</Link>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      \r\n      <div className=\"dashboard-charts\">\r\n        <div className=\"chart-container\">\r\n          <h3>All Sales by Month</h3>\r\n          {aggregatedData.timeline_chart && aggregatedData.timeline_chart.length > 0 ? (\r\n            <LineChart data={aggregatedData.timeline_chart} />\r\n          ) : (\r\n            <p>No timeline data available</p>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"chart-container\">\r\n          <h3>All Sales by Company</h3>\r\n          {aggregatedData.company_chart && aggregatedData.company_chart.length > 0 ? (\r\n            <BarChart data={aggregatedData.company_chart} />\r\n          ) : (\r\n            <p>No company data available</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;",{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":15,"column":10,"nodeType":"60","messageId":"61","endLine":15,"endColumn":17},{"ruleId":"62","severity":1,"message":"63","line":50,"column":6,"nodeType":"64","endLine":50,"endColumn":28,"suggestions":"65"},{"ruleId":"66","severity":1,"message":"67","line":36,"column":39,"nodeType":"68","messageId":"69","endLine":44,"endColumn":12},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'hasData' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'task'. Either include it or remove the dependency array.","ArrayExpression",["72"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'totalSales'.","ArrowFunctionExpression","unsafeRefs","no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},"Update the dependencies array to be: [taskId, task.status, task]",{"range":"75","text":"76"},[1570,1592],"[taskId, task.status, task]"]