{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\nexport const fetchTasks = async () => {\n  const response = await axios.get(`${API_URL}/tasks`);\n  return response.data;\n};\nexport const fetchTask = async taskId => {\n  const response = await axios.get(`${API_URL}/tasks/${taskId}`);\n  return response.data;\n};\nexport const createTask = async taskData => {\n  const response = await axios.post(`${API_URL}/tasks`, taskData);\n  return response.data;\n};\nexport const fetchTaskData = async (taskId, filters = {}) => {\n  const params = new URLSearchParams();\n  if (filters.company) params.append('company', filters.company);\n  if (filters.year) params.append('year', filters.year);\n  const response = await axios.get(`${API_URL}/tasks/${taskId}/data`, {\n    params\n  });\n  return response.data;\n};\nexport const fetchTaskAnalytics = async (taskId, filters = {}) => {\n  const params = new URLSearchParams();\n  if (filters.company) params.append('company', filters.company);\n  if (filters.year) params.append('year', filters.year);\n  const response = await axios.get(`${API_URL}/tasks/${taskId}/analytics`, {\n    params\n  });\n  return response.data;\n};\nexport const exportTaskData = async (taskId, format = 'csv', filters = {}) => {\n  const params = new URLSearchParams();\n  params.append('format', format);\n  if (filters.company) params.append('company', filters.company);\n  if (filters.year) params.append('year', filters.year);\n  window.location.href = `${API_URL}/tasks/${taskId}/export?${params.toString()}`;\n};\nexport const retryTask = async taskId => {\n  try {\n    // Get the original task to copy its parameters\n    const originalTask = await fetchTask(taskId);\n\n    // Create a new task with the same parameters\n    return await createTask(originalTask.parameters);\n  } catch (error) {\n    console.error('Error retrying task:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","fetchTasks","response","get","data","fetchTask","taskId","createTask","taskData","post","fetchTaskData","filters","params","URLSearchParams","company","append","year","fetchTaskAnalytics","exportTaskData","format","window","location","href","toString","retryTask","originalTask","parameters","error","console"],"sources":["C:/Users/Devarshi/data-viz-app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\nexport const fetchTasks = async () => {\r\n  const response = await axios.get(`${API_URL}/tasks`);\r\n  return response.data;\r\n};\r\n\r\nexport const fetchTask = async (taskId) => {\r\n  const response = await axios.get(`${API_URL}/tasks/${taskId}`);\r\n  return response.data;\r\n};\r\n\r\nexport const createTask = async (taskData) => {\r\n  const response = await axios.post(`${API_URL}/tasks`, taskData);\r\n  return response.data;\r\n};\r\n\r\nexport const fetchTaskData = async (taskId, filters = {}) => {\r\n  const params = new URLSearchParams();\r\n  if (filters.company) params.append('company', filters.company);\r\n  if (filters.year) params.append('year', filters.year);\r\n  \r\n  const response = await axios.get(`${API_URL}/tasks/${taskId}/data`, { params });\r\n  return response.data;\r\n};\r\n\r\nexport const fetchTaskAnalytics = async (taskId, filters = {}) => {\r\n    const params = new URLSearchParams();\r\n    if (filters.company) params.append('company', filters.company);\r\n    if (filters.year) params.append('year', filters.year);\r\n    \r\n    const response = await axios.get(`${API_URL}/tasks/${taskId}/analytics`, { params });\r\n    return response.data;\r\n};\r\n\r\nexport const exportTaskData = async (taskId, format = 'csv', filters = {}) => {\r\n  const params = new URLSearchParams();\r\n  params.append('format', format);\r\n  if (filters.company) params.append('company', filters.company);\r\n  if (filters.year) params.append('year', filters.year);\r\n  \r\n  window.location.href = `${API_URL}/tasks/${taskId}/export?${params.toString()}`;\r\n};\r\n\r\nexport const retryTask = async (taskId) => {\r\n  try {\r\n    // Get the original task to copy its parameters\r\n    const originalTask = await fetchTask(taskId);\r\n    \r\n    // Create a new task with the same parameters\r\n    return await createTask(originalTask.parameters);\r\n  } catch (error) {\r\n    console.error('Error retrying task:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,QAAQ,CAAC;EACpD,OAAOE,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,MAAOC,MAAM,IAAK;EACzC,MAAMJ,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,UAAUM,MAAM,EAAE,CAAC;EAC9D,OAAOJ,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMG,UAAU,GAAG,MAAOC,QAAQ,IAAK;EAC5C,MAAMN,QAAQ,GAAG,MAAMH,KAAK,CAACU,IAAI,CAAC,GAAGT,OAAO,QAAQ,EAAEQ,QAAQ,CAAC;EAC/D,OAAON,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMM,aAAa,GAAG,MAAAA,CAAOJ,MAAM,EAAEK,OAAO,GAAG,CAAC,CAAC,KAAK;EAC3D,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;EACpC,IAAIF,OAAO,CAACG,OAAO,EAAEF,MAAM,CAACG,MAAM,CAAC,SAAS,EAAEJ,OAAO,CAACG,OAAO,CAAC;EAC9D,IAAIH,OAAO,CAACK,IAAI,EAAEJ,MAAM,CAACG,MAAM,CAAC,MAAM,EAAEJ,OAAO,CAACK,IAAI,CAAC;EAErD,MAAMd,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,UAAUM,MAAM,OAAO,EAAE;IAAEM;EAAO,CAAC,CAAC;EAC/E,OAAOV,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMa,kBAAkB,GAAG,MAAAA,CAAOX,MAAM,EAAEK,OAAO,GAAG,CAAC,CAAC,KAAK;EAC9D,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;EACpC,IAAIF,OAAO,CAACG,OAAO,EAAEF,MAAM,CAACG,MAAM,CAAC,SAAS,EAAEJ,OAAO,CAACG,OAAO,CAAC;EAC9D,IAAIH,OAAO,CAACK,IAAI,EAAEJ,MAAM,CAACG,MAAM,CAAC,MAAM,EAAEJ,OAAO,CAACK,IAAI,CAAC;EAErD,MAAMd,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,UAAUM,MAAM,YAAY,EAAE;IAAEM;EAAO,CAAC,CAAC;EACpF,OAAOV,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,OAAO,MAAMc,cAAc,GAAG,MAAAA,CAAOZ,MAAM,EAAEa,MAAM,GAAG,KAAK,EAAER,OAAO,GAAG,CAAC,CAAC,KAAK;EAC5E,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;EACpCD,MAAM,CAACG,MAAM,CAAC,QAAQ,EAAEI,MAAM,CAAC;EAC/B,IAAIR,OAAO,CAACG,OAAO,EAAEF,MAAM,CAACG,MAAM,CAAC,SAAS,EAAEJ,OAAO,CAACG,OAAO,CAAC;EAC9D,IAAIH,OAAO,CAACK,IAAI,EAAEJ,MAAM,CAACG,MAAM,CAAC,MAAM,EAAEJ,OAAO,CAACK,IAAI,CAAC;EAErDI,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAGtB,OAAO,UAAUM,MAAM,WAAWM,MAAM,CAACW,QAAQ,CAAC,CAAC,EAAE;AACjF,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,MAAOlB,MAAM,IAAK;EACzC,IAAI;IACF;IACA,MAAMmB,YAAY,GAAG,MAAMpB,SAAS,CAACC,MAAM,CAAC;;IAE5C;IACA,OAAO,MAAMC,UAAU,CAACkB,YAAY,CAACC,UAAU,CAAC;EAClD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}